/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        "email": string;
        "merchant_key": string;
        "payer_name": string;
        "payer_phone": string;
    }
    interface PayboxCheckoutWidget {
        "amount": number;
        "currency": string;
        "email": string;
        "merchant_key": string;
        "payer_name": string;
        "payer_phone": string;
        "phone_number": string;
    }
    interface PayboxDonationWidget {
    }
}
export interface PayboxCheckoutWidgetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPayboxCheckoutWidgetElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPayboxCheckoutWidgetElementEventMap {
        "didReset": any;
    }
    interface HTMLPayboxCheckoutWidgetElement extends Components.PayboxCheckoutWidget, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPayboxCheckoutWidgetElementEventMap>(type: K, listener: (this: HTMLPayboxCheckoutWidgetElement, ev: PayboxCheckoutWidgetCustomEvent<HTMLPayboxCheckoutWidgetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPayboxCheckoutWidgetElementEventMap>(type: K, listener: (this: HTMLPayboxCheckoutWidgetElement, ev: PayboxCheckoutWidgetCustomEvent<HTMLPayboxCheckoutWidgetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPayboxCheckoutWidgetElement: {
        prototype: HTMLPayboxCheckoutWidgetElement;
        new (): HTMLPayboxCheckoutWidgetElement;
    };
    interface HTMLPayboxDonationWidgetElement extends Components.PayboxDonationWidget, HTMLStencilElement {
    }
    var HTMLPayboxDonationWidgetElement: {
        prototype: HTMLPayboxDonationWidgetElement;
        new (): HTMLPayboxDonationWidgetElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "paybox-checkout-widget": HTMLPayboxCheckoutWidgetElement;
        "paybox-donation-widget": HTMLPayboxDonationWidgetElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        "email"?: string;
        "merchant_key"?: string;
        "payer_name"?: string;
        "payer_phone"?: string;
    }
    interface PayboxCheckoutWidget {
        "amount"?: number;
        "currency"?: string;
        "email"?: string;
        "merchant_key"?: string;
        "onDidReset"?: (event: PayboxCheckoutWidgetCustomEvent<any>) => void;
        "payer_name"?: string;
        "payer_phone"?: string;
        "phone_number"?: string;
    }
    interface PayboxDonationWidget {
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "paybox-checkout-widget": PayboxCheckoutWidget;
        "paybox-donation-widget": PayboxDonationWidget;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "paybox-checkout-widget": LocalJSX.PayboxCheckoutWidget & JSXBase.HTMLAttributes<HTMLPayboxCheckoutWidgetElement>;
            "paybox-donation-widget": LocalJSX.PayboxDonationWidget & JSXBase.HTMLAttributes<HTMLPayboxDonationWidgetElement>;
        }
    }
}
